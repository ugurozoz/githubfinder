"use strict";function githubFinder(){this.xhr=new XMLHttpRequest}var src=document.getElementById("github-search"),body=document.querySelector(".body__mid"),userphoto=document.querySelector(".github__photo"),githubprofile=document.querySelector(".github__profile-button a"),githubstats=document.querySelector(".github__right__top"),githubnfo=document.querySelector(".github__right__mid"),githubrepos=document.querySelector(".github__repos"),errorDiv=document.querySelector(".body__error");githubFinder.prototype.findUser=function(t,e){var r="https://api.github.com/users/".concat(t);this.xhr.open("GET",r,!0);var o=this;this.xhr.onload=function(){200===o.xhr.status?e(null,o.xhr.responseText):e("Error : "+o.xhr.status)},this.xhr.send()};var setRepos=function(t){if(clear(githubrepos),console.log(">>",t),t.length>0){var e=t.length>3?4:t.length;t.sort(function(t,e){return e.id-t.id});for(var r=0;r<e;r++){var o=document.createElement("div");o.className="github__repo";var n=document.createElement("a");n.textContent=t[r].name,n.setAttribute("href",t[r].html_url),n.setAttribute("target","_blank");var i=document.createElement("span");i.textContent="Stars: ".concat(t[r].stargazers_count);var s=document.createElement("span");s.textContent="Watchers: ".concat(t[r].watchers_count);var u=document.createElement("span");u.textContent="Forks: ".concat(t[r].forks_count),o.appendChild(n),o.appendChild(i),o.appendChild(s),o.appendChild(u),githubrepos.appendChild(o)}githubrepos.style.display="block"}else githubrepos.style.display="none"};githubFinder.prototype.getUserInfo=function(t){clear(userphoto),console.log(t);var e=t.avatar_url,r=t.html_url;githubprofile.setAttribute("href",r),this.setPhoto(e),this.setStats(t.public_repos,t.public_gists,t.followers,t.following),this.setNfo(t.company,t.blog,t.location,t.created_at),this.findRepos(t.login,function(t,e){t?console.log(t):setRepos(JSON.parse(e))}),body.style.display="block"},githubFinder.prototype.findRepos=function(t,e){var r="https://api.github.com/users/".concat(t,"/repos");this.xhr.open("GET",r,!0);var o=this;this.xhr.onload=function(){200===o.xhr.status?e(null,o.xhr.responseText):e("Error : "+o.xhr.status)},this.xhr.send()};var clear=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},error=function(t,e){"show"===t?(errorDiv.querySelector("p").textContent=e,errorDiv.style.display="block"):errorDiv.style.display="none"};githubFinder.prototype.setPhoto=function(t){var e=document.createElement("img");e.setAttribute("src",t),userphoto.appendChild(e)},githubFinder.prototype.setStats=function(t,e,r,o){var n=githubstats.querySelectorAll(".github__stat span");n[0].textContent=t?t:0,n[1].textContent=e?e:0,n[2].textContent=r?r:0,n[3].textContent=o?o:0},githubFinder.prototype.setNfo=function(t,e,r,o){var n=githubnfo.querySelectorAll(".github__nfo span");n[0].textContent=t,n[1].textContent=e,n[2].textContent=r,n[3].textContent=o};var finder=new githubFinder;finder.setStats(),document.addEventListener("keyup",function(t){body.style.display="none",""!==t.target.value.trim()?finder.findUser(src.value,function(t,e){t?error("show","User not found"):(error("hide"),finder.getUserInfo(JSON.parse(e)))}):error("show","Please provide a valid username")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
